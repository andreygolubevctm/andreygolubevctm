<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.ctm.pom</groupId>
        <artifactId>uber-pom</artifactId>
        <version>1.6.0</version>
    </parent>

    <groupId>com.ctm.web</groupId>
    <artifactId>ctm</artifactId>
    <version>1.19.15</version>
    <name>ctm</name>
    <description>Main web application</description>
    <packaging>war</packaging>

    <properties>
        <!-- CTM -->
        <common-logging.version>1.5.0-RC1</common-logging.version>
        <common-interfaces.version>1.9.0-RC2</common-interfaces.version>
        <http-client.version>1.3.0-RC1</http-client.version>
        <energy-model-quote.version>1.0.0-RC1</energy-model-quote.version>
        <energy-apply-model.version>1.1.0-RC2</energy-apply-model.version>
        <contact-validator-model.version>1.0.0-RC1</contact-validator-model.version>

        <!-- 3rd party -->
        <powermock.version>1.6.2</powermock.version>
        <guava.version>18.0</guava.version>
        <jsonassert.version>1.2.3</jsonassert.version>
        <cxf.version>3.0.1</cxf.version>
        <spring-boot.version>1.2.7.RELEASE</spring-boot.version>
        <spring-boot-legacy.version>1.0.1.RELEASE</spring-boot-legacy.version>
        <spring.version>4.1.8.RELEASE</spring.version> <!-- must match spring version -->
        <spring.ws.version>2.2.0.RELEASE</spring.ws.version>
        <tomcat.version>7.0.65</tomcat.version>
        <jaxws-maven-plugin.version>2.3</jaxws-maven-plugin.version>
        <maven-compiler-plugin.version>3.2</maven-compiler-plugin.version>
        <frontend-maven-plugin.version>0.0.26</frontend-maven-plugin.version>
        <javax.el.version>2.2.4</javax.el.version>
        <javax.servlet.version>3.0.1</javax.servlet.version>
        <jackson.version>2.6.2</jackson.version>
        <javax.jsp.version>2.2</javax.jsp.version>
        <mysql.connector.version>5.1.29</mysql.connector.version>
        <org.mapstruct.version>1.0.0.CR1</org.mapstruct.version>
        <spring-rabbit.version>1.4.6.RELEASE</spring-rabbit.version>
        <swagger-annotations.version>1.5.4</swagger-annotations.version>

        <!-- Compile as this version -->
        <java.version>1.8</java.version>
        <jspc-maven-plugin.version>2.0.0</jspc-maven-plugin.version>

        <node.version>v4.2.1</node.version>
        <npm.version>2.14.8</npm.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>tomcat-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-legacy</artifactId>
            <version>${spring-boot-legacy.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Test libraries -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
            <version>3.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>3.18.2-GA</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.objenesis</groupId>
            <artifactId>objenesis</artifactId>
            <version>2.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4-rule</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-classloading-xstream</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>xmlunit</groupId>
            <artifactId>xmlunit</artifactId>
            <version>1.6</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>javax.el</artifactId>
            <version>${javax.el.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>${jsonassert.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Tomcat libraries -->

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jsp-api</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-catalina</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.connector.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Apache Commons -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
        </dependency>

        <!-- cxf -->

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxws</artifactId>
            <version>${cxf.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <version>${cxf.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-ws-security</artifactId>
            <version>${cxf.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
            <version>${cxf.version}</version>
        </dependency>

        <!-- CTM libraries -->

        <dependency>
            <groupId>com.ctm.common</groupId>
            <artifactId>common-logging</artifactId>
            <version>${common-logging.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ctm.common</groupId>
            <artifactId>common-interfaces</artifactId>
            <version>${common-interfaces.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ctm.validator</groupId>
            <artifactId>contact-validator-model</artifactId>
            <version>${contact-validator-model.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ctm.common</groupId>
            <artifactId>http-client</artifactId>
            <version>${http-client.version}</version>
        </dependency>

        <!-- Other 3rd Party -->

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.11.0</version>
        </dependency>

        <dependency>
            <groupId>xalan</groupId>
            <artifactId>xalan</artifactId>
            <version>2.7.1</version>
        </dependency>

        <dependency>
            <groupId>com.mikesamuel</groupId>
            <artifactId>json-sanitizer</artifactId>
            <version>1.0</version>
        </dependency>

        <!-- jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>5.1.3.Final</version>
        </dependency>

        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>1.4.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml</groupId>
            <artifactId>classmate</artifactId>
            <version>1.0.0</version>
        </dependency>

        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3</version>
        </dependency>

        <dependency>
            <groupId>net.lingala.zip4j</groupId>
            <artifactId>zip4j</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.49</version>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>local-upload</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>net.sf.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>2.3</version>
        </dependency>
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.6.3</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp.jstl</groupId>
            <artifactId>javax.servlet.jsp.jstl-api</artifactId>
            <version>1.2.1</version>
        </dependency>

        <!-- IBM AS400 JAR (JT400.JAR) -->
        <dependency>
            <groupId>net.sf.jt400</groupId>
            <artifactId>jt400</artifactId>
            <version>6.6</version>
        </dependency>

        <dependency>
            <groupId>atg.taglib.json</groupId>
            <artifactId>json-taglib</artifactId>
            <version>0.4.1</version>
        </dependency>


        <dependency>
            <groupId>org.apache.santuario</groupId>
            <artifactId>xmlsec</artifactId>
            <version>2.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.ws</groupId>
            <artifactId>spring-ws-security</artifactId>
            <version>${spring.ws.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.ws</groupId>
            <artifactId>spring-ws-core</artifactId>
            <version>${spring.ws.version}</version>
        </dependency>

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.4</version>
        </dependency>

        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.0</version>
        </dependency>

        <dependency>
            <groupId>eu.bitwalker</groupId>
            <artifactId>UserAgentUtils</artifactId>
            <version>1.15</version>
        </dependency>

        <dependency>
            <groupId>com.ctm.webservices</groupId>
            <artifactId>motorweb</artifactId>
            <version>1.5.0</version>
        </dependency>

        <dependency>
            <groupId>com.ctm.energy</groupId>
            <artifactId>energy-model-quote</artifactId>
            <version>${energy-model-quote.version}</version>
        </dependency>
        <dependency>
            <groupId>com.ctm.energy</groupId>
            <artifactId>energy-apply-model</artifactId>
            <version>${energy-apply-model.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.taglibs</groupId>
            <artifactId>taglibs-standard-impl</artifactId>
            <version>1.2.1</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.7</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.5.1</version>
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger-annotations.version}</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>
    <profiles>
        <profile>
            <id>build-frontend</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${frontend-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>node-and-npm-install</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>install-node-and-npm</goal>
                                </goals>
                                <configuration>
                                    <nodeVersion>${node.version}</nodeVersion>
                                    <npmVersion>${npm.version}</npmVersion>
                                    <nodeDownloadRoot>${node.download.root}/</nodeDownloadRoot>
                                    <npmDownloadRoot>${npm.download.root}/</npmDownloadRoot>
                                    <workingDirectory>${project.basedir}/src/main/pipeline</workingDirectory>
                                </configuration>
                            </execution>

                            <execution>
                                <id>npm-install</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <arguments>install</arguments>
                                    <workingDirectory>${project.basedir}/src/main/pipeline</workingDirectory>
                                </configuration>
                            </execution>

                            <execution>
                                <id>gulp-build</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>gulp</goal>
                                </goals>
                                <configuration>
                                    <arguments>build --targetFolder=${project.name}-${project.version} --disableNotify=true</arguments>
                                    <workingDirectory>${project.basedir}/src/main/pipeline</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>clean-node-dirs</id>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <phase>clean</phase>
                                <configuration>
                                    <filesets>
                                        <fileset>
                                            <directory>${project.basedir}/src/main/pipeline/node</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${project.basedir}/src/main/pipeline/node_modules</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${project.basedir}/src/test/frontend/node</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${project.basedir}/src/test/frontend/node_modules</directory>
                                        </fileset>
                                    </filesets>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>embedded-tomcat7-run</id>
            <properties>
                <cargo.maven.containerUrl>http://nexusctm.budgetdirect.com.au/content/repositories/central/org/apache/tomcat/tomcat/${tomcat.version}/tomcat-${tomcat.version}.zip</cargo.maven.containerUrl>
                <javaagent.args></javaagent.args>
                <!--<cargo.maven.containerId>tomcat7x</cargo.maven.containerId> defined in developer-properties profile -->
                <!--<javaagent.args>-javaagent:${project.build.directory}/embedded_jars/springloaded.jar -noverify</javaagent.args>-->
            </properties>
            <build>
                <plugins>
                    <!-- Pull down jars for tomcat7 embedded run -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-deps</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>mysql</groupId>
                                            <artifactId>mysql-connector-java</artifactId>
                                            <version>${mysql.connector.version}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <destFileName>mysql-connector-java.jar</destFileName>
                                        </artifactItem>
                                        <!--artifactItem>
                                            <groupId>org.springframework</groupId>
                                            <artifactId>springloaded</artifactId>
                                            <version>1.2.5.RELEASE</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <destFileName>springloaded.jar</destFileName>
                                        </artifactItem-->
                                    </artifactItems>
                                    <outputDirectory>${project.build.directory}/embedded_jars</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Override packaging, skip it. Just build exploded war -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-war</id>
                                <goals>
                                    <goal>war</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>inplace-war</id>
                                <goals>
                                    <goal>exploded</goal>
                                </goals>
                                <phase>prepare-package</phase>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Skip springboot modifications -->
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${spring-boot.version}</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>

                            <!-- Override the default ctm context.xml -->
                            <execution>
                                <id>copy-tomcat-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/${project.build.finalName}/META-INF</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/test/resources/embedded/tomcat7</directory>
                                            <includes>
                                                <include>context.xml</include>
                                            </includes>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>

                            <!--Create tomcat reload touch file -->
                            <execution>
                                <id>copy-touch-restart</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.basedir}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/test/resources/embedded</directory>
                                            <includes>
                                                <include>touch_restart.txt</include>
                                            </includes>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run exploded war under cargo -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>${cargo.maven.containerId}</containerId>
                                <zipUrlInstaller>
                                    <url>${cargo.maven.containerUrl}</url>
                                </zipUrlInstaller>
                                <systemProperties>
                                    <spring.profiles.active>LOCALHOST</spring.profiles.active>

                                    <nxi.db.username>${nxi.db.username}</nxi.db.username>
                                    <nxi.db.password>${nxi.db.password}</nxi.db.password>

                                    <https.proxyHost>192.168.1.111</https.proxyHost>
                                    <https.proxyPort>8080</https.proxyPort>
                                    <https.proxyUser>ittest</https.proxyUser>
                                    <https.proxyPassword>1tt3st</https.proxyPassword>

                                    <http.proxyHost>192.168.1.111</http.proxyHost>
                                    <http.proxyPort>8080</http.proxyPort>
                                    <http.proxyUser>ittest</http.proxyUser>
                                    <http.proxyPassword>1tt3st</http.proxyPassword>
                                    <http.nonProxyHosts>*.ecommerce.disconline.com.au|*.captaincompare.com.au|*.intranet|localhost|127.0.0.1</http.nonProxyHosts>
                                </systemProperties>
                            </container>

                            <configuration>
                                <type>existing</type>
                                <home>${project.build.directory}/cargo/installs/tomcat-${tomcat.version}/apache-tomcat-${tomcat.version}</home>
                                <properties>
                                    <catalina.servlet.uriencoding>UTF-8</catalina.servlet.uriencoding> <!-- -->
                                    <cargo.jvmargs>${javaagent.args} -Xmx2048M -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005</cargo.jvmargs>
                                </properties>

                                <!-- Inject text files here -->
                                <configfiles>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/embedded/tomcat7/conf/logging.properties</file>
                                        <todir>conf/</todir>
                                        <tofile>logging.properties</tofile>
                                    </configfile>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/embedded/tomcat7/conf/tomcat-users.xml</file>
                                        <todir>conf/</todir>
                                        <tofile>tomcat-users.xml</tofile>
                                    </configfile>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/embedded/tomcat7/conf/web.xml</file>
                                        <todir>conf/</todir>
                                        <tofile>web.xml</tofile>
                                    </configfile>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/embedded/tomcat7/conf/logging.properties</file>
                                        <todir>conf/</todir>
                                        <tofile>logging.properties</tofile>
                                    </configfile>
                                </configfiles>

                                <!-- Inject binaries files here -->
                                <files>
                                    <configfile>
                                        <file>${project.build.directory}/embedded_jars/mysql-connector-java.jar</file>
                                        <todir>lib/</todir>
                                        <tofile>mysql-connector-java.jar</tofile>
                                    </configfile>
                                </files>

                            </configuration>

                            <deployables>
                                <deployable>
                                    <type>war</type>
                                    <properties>
                                        <context>${project.artifactId}</context>
                                    </properties>
                                    <location>${project.basedir}/target/${project.artifactId}-${project.version}</location>
                                </deployable>
                            </deployables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>springboot-embedded-tomcat</id>
            <!-- include embedded tomcat and  tomcat libs so we can run app using main class from IDE -->
            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </dependency>
                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jasig.mojo.jspc</groupId>
                <artifactId>jspc-maven-plugin</artifactId>
                <version>${jspc-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <defaultSourcesDirectory>${project.basedir}/src/main/webapp</defaultSourcesDirectory>
                            <inputWebXml>${project.basedir}/src/main/webapp/WEB-INF/web.xml</inputWebXml>
                            <outputWebXml>${project.build.directory}/web-jsp-compiled.xml</outputWebXml>
                            <compile>false</compile>
                        </configuration>
                    </execution>
                </executions>
                <!-- Use the Tomcat 7 JSP compiler -->
                <dependencies>
                    <dependency>
                        <groupId>org.jasig.mojo.jspc</groupId>
                        <artifactId>jspc-compiler-tomcat7</artifactId>
                        <version>${jspc-maven-plugin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.tomcat</groupId>
                        <artifactId>tomcat-jasper</artifactId>
                        <version>${tomcat.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.tomcat</groupId>
                        <artifactId>tomcat-annotations-api</artifactId>
                        <version>${tomcat.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Copy aggregator dir across into the classes dir, dothis in prepare-package so it doesnt upset tomcat7-plugin -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-extra-classes-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/aggregator</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/webapp/WEB-INF/aggregator</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <id>repack-war</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>${branch.classifier}</classifier>
                            <mainClass>com.ctm.web.core.Application</mainClass>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <addResources>false</addResources>
                    <jvmArguments>
                        -Dhttps.proxyHost=192.168.1.111 -Dhttps.proxyPort=8080 -Dhttp.proxyHost=192.168.1.111 -Dhttp.proxyPort=8080 -Dhttp.nonProxyHosts="*.ecommerce.disconline.com.au|*.captaincompare.com.au|*.intranet|localhost|127.0.0.1" -Dhttps.proxyUser=ittest -Dhttps.proxyPassword=1tt3st -Dspring.datasource.username=${nxi.db.username} -Dspring.datasource.password=${nxi.db.password} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
                    </jvmArguments>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jvnet.jax-ws-commons</groupId>
                <artifactId>jaxws-maven-plugin</artifactId>
                <version>${jaxws-maven-plugin.version}</version>
                <executions>
                    <!-- For each provider you have to provide new execution -->
                    <execution>
                        <id>exacttarget</id>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <vmArgs>
                                <vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
                            </vmArgs>
                            <packageName>com.exacttarget.wsdl.partnerapi</packageName>
                            <wsdlDirectory>${project.basedir}/src/main/resources/webservice-api/exacttarget/</wsdlDirectory>
                            <wsdlLocation>/webservice-api/exacttarget/wsdl/etframework.wsdl</wsdlLocation>
                            <wsdlFiles>
                                <wsdlFile>wsdl/etframework.wsdl</wsdlFile>
                            </wsdlFiles>
                        </configuration>
                    </execution>
                    <execution>
                        <id>aglead_ws</id>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <vmArgs>
                                <vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
                            </vmArgs>
                            <packageName>com.ctm.aglead.ws</packageName>
                            <wsdlDirectory>${project.basedir}/src/main/resources/webservice-api/aglead_ws/</wsdlDirectory>
                            <wsdlFiles>
                                <wsdlFile>wsdl/messageCentreCreateMessage.wsdl</wsdlFile>
                            </wsdlFiles>
                            <wsdlLocation>/webservice-api/aglead_ws/wsdl/messageCentreCreateMessage.wsdl</wsdlLocation>
                            <bindingFiles>
                                <bindingFiles>${project.basedir}/src/main/resources/webservice-api/aglead_ws/bindings.xml</bindingFiles>
                            </bindingFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.github.klieber</groupId>
                <artifactId>phantomjs-maven-plugin</artifactId>
                <version>0.5</version>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <version>1.9.7</version>
                    <outputDirectory>${project.build.directory}/phantomjs-install/</outputDirectory>
                    <skip>${maven.test.skip}</skip>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${frontend-maven-plugin.version}</version>

                <executions>

                    <execution>
                        <id>install node and npm test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>${node.version}</nodeVersion>
                            <npmVersion>${npm.version}</npmVersion>
                            <nodeDownloadRoot>${node.download.root}/</nodeDownloadRoot>
                            <npmDownloadRoot>${npm.download.root}/</npmDownloadRoot>
                            <workingDirectory>${project.basedir}/src/test/frontend</workingDirectory>
                            <skip>${maven.test.skip}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>npm install test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                            <workingDirectory>${project.basedir}/src/test/frontend</workingDirectory>
                            <skip>${maven.test.skip}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>grunt build test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>--phantomPath=${phantomjs.binary}</arguments>
                            <workingDirectory>${project.basedir}/src/test/frontend</workingDirectory>
                            <skip>${maven.test.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <!-- Start gulp js processor in foreground -->
                    <execution>
                        <id>start-gulp</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>none</phase>
                        <configuration>
                            <executable>${project.basedir}/scripts/start_gulp.bat</executable>
                            <arguments>
                                <argument>${project.build.finalName}</argument>
                            </arguments>
                            <workingDirectory>${project.basedir}/scripts</workingDirectory>
                        </configuration>
                    </execution>

                    <!-- Start tomcat7 server in foreground -->
                    <execution>
                        <id>start-tomcat7</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>none</phase>
                        <configuration>
                            <executable>${project.basedir}/scripts/start_tomcat7.bat</executable>
                            <workingDirectory>${project.basedir}/scripts</workingDirectory>
                        </configuration>
                    </execution>

                    <!-- Build project from scratch and start tomcat7 server in foreground -->
                    <execution>
                        <id>build-tomcat7</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>none</phase>
                        <configuration>
                            <executable>${project.basedir}/scripts/build_tomcat7.bat</executable>
                            <workingDirectory>${project.basedir}/scripts</workingDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
