<?xml version="1.0" encoding="UTF-8"?>
<!-- ========================================== -->
<!-- ========  AIH Compare The Market  ======== -->
<!-- CTM Web Application Deployment Ant Build
<!   $Id$
<! ©2013 Australian Insurance Holdings Pty Ltd  -->

<project name="web_ctm" default="usage">

	<!-- Requires: Ant 1.8 or greater, with jsch.jar library 0.1.42 or greater (for scp support) and svn on the box -->

<!-- :TODO: need final SCP/SSH locations and credentials (currently uploads to localhost on xplooy’s dev Mac) -->

	<!-- ============================================================ -->
	<!-- Build-Wide Properties -->
	<!-- ============================================================ -->

	<!-- Properties for this application -->
<!-- :TODO: replace where necessary, likely based on OS the ant build script is being run from (e.g. build.properties.unix etc?) -->
	<description>web_ctm: Compare The Market Online Aggregator</description>
	<property name="war.context" value="ctm" />
	<property name="tomcatlib.dir" value="/usr/tomcat/current/lib" />

	<!-- Common and/or derived properties -->
	<property name="tmp.dir" value="${java.io.tmpdir}" />
	<tempfile property="export.dir" destDir="${java.io.tmpdir}" prefix="antdeploy-${war.context}-" />
	<property name="war.filename" value="${war.context}.war" />
	<property name="src.dir" value="${export.dir}/src" />
	<property name="web.dir" value="${export.dir}/WebContent" />
	<property name="webinf.dir" value="${web.dir}/WEB-INF" />
	<property name="classes.dir" value="${webinf.dir}/classes"/>



	<!-- ============================================================ -->
	<!-- External (Public-Facing) Targets -->
	<!-- ============================================================ -->

	<target name="usage"  description="Display a build process usage message">
		<echo message="" />
		<echo message="Ant Builder for Project: ${war.context}" />
		<echo message="--------------------------------------------" />
		<echo message="" />
		<echo message="Deploy to various target environments." />
		<echo message="Available targets:" />
		<echo message="  usage           Display this help message" />
		<echo message="  deploy.INT      Deploy new WAR to INT environment" />
		<echo message="                    (auto on svn server, every 2 hours via cron, used during Ant build script development)" />
		<echo message="  deploy.QA       Deploy new WAR to QA environment" />
		<echo message="                    (auto on svn server, automatically on svn commit to deploy_QA)" />
		<echo message="  deploy.PRELIVE  Deploy new WAR to PRELIVE environment" />
		<echo message="                    (auto on svn server, automatically on svn commit to deploy_PRELIVE)" />
		<echo message="  deploy.PRO      Deploy last PRELIVE environment WAR to PRO environment," />
		<echo message="                    backing up the current PRO environment WAR as a rollback state" />
		<echo message="" />
	</target>

	<target name="deploy.INT" depends="_init" description="Deploy new WAR to INT environment (on svn server, every 2 hours via cron, used during Ant build script development)">
		<property name="target.prefix" value="INT" />

		<!-- Export and Configure -->
		<antcall target="_export">
			<!-- :NOTE: Custom SCM path: INT uses trunk as export root -->
			<param name="scm.path" value="trunk" />
		</antcall>
		<antcall target="_enableConfigs" />
		<antcall target="_removeConfigs">
			<param name="destroy.prefix" value="PRO" />
		</antcall>
		<antcall target="_removeConfigs">
			<param name="destroy.prefix" value="QA" />
		</antcall>

		<!-- Build Classes, Make WAR, and Deploy -->
		<antcall target="_makewar">
			<param name="JVM.version" value="1.7" />
		</antcall>
		<antcall target="_upload">
			<param name="ssh.host" value="localhost" />
			<param name="ssh.userid" value="antdeploy" />
			<param name="ssh.keyfile" value="/Users/xplooy/.ssh/id_antdeploy_rsa" />
			<param name="ssh.uploaddir" value="/Users/antdeploy/archive/${war.context}/${target.prefix}/" />
<!-- :TODO: enable once Tomcat Manager integration is complete
			<param name="tomcat.manager.url" value="http://localhost:8080/manager" />
			<!- - param name="tomcat.manager.url" value="http://int.comparethemarket.com.au:8080/manager" / - ->
			<param name="tomcat.manager.username" value="adminuserisadminy" />
			<param name="tomcat.manager.password" value="helloworldthesearenotrealcredentials" />
-->
		</antcall>

		<echo message="Deploy to ${target.prefix} environment SUCCESSFUL!" />
	</target>

	<target name="deploy.QA" depends="_init" description="Deploy new WAR to QA environment (on svn server, automatically on svn commit to deploy_QA)">
		<property name="target.prefix" value="QA" />

		<!-- Export and Configure -->
		<antcall target="_export">
			<param name="scm.path" value="deploy_${target.prefix}" />
		</antcall>
		<antcall target="_enableConfigs" />
		<antcall target="_removeConfigs">
			<param name="destroy.prefix" value="PRO" />
		</antcall>

		<!-- Build Classes, Make WAR, and Deploy -->
		<antcall target="_makewar">
			<param name="JVM.version" value="1.7" />
		</antcall>
		<antcall target="_upload">
			<param name="ssh.host" value="localhost" />
			<param name="ssh.userid" value="antdeploy" />
			<param name="ssh.keyfile" value="/Users/xplooy/.ssh/id_antdeploy_rsa" />
			<param name="ssh.uploaddir" value="/Users/antdeploy/archive/${war.context}/${target.prefix}/" />
<!-- :TODO: enable once Tomcat Manager integration is complete
			<param name="tomcat.manager.url" value="http://localhost:8080/manager" />
			<!- - param name="tomcat.manager.url" value="http://tws01_ass1:8080/manager" / - ->
			<param name="tomcat.manager.username" value="adminuserisadminy" />
			<param name="tomcat.manager.password" value="helloworldthesearenotrealcredentials" />
-->
		</antcall>

		<echo message="Deploy to ${target.prefix} environment SUCCESSFUL!" />
	</target>

	<target name="deploy.PRELIVE" depends="_init" description="Deploy new WAR to PRELIVE environment (on svn server, automatically on svn commit to deploy_PRELIVE)">
		<!-- :NOTE: The “prelive” deploy is effectively a “production” build,
		<!   so shares its “target prefix” of “PRO”,
		<!   but uses a different SCM source and SSH destination -->

		<!-- :NOTE: Custom prefix: PRELIVE uses PRO configs and ID (for Manifest file etc) -->
		<property name="target.prefix" value="PRO" />

		<!-- Export and Configure -->
		<antcall target="_export">
			<!-- :NOTE: Custom SCM path: PRELIVE uses deploy_PRELIVE as export root -->
			<param name="scm.path" value="deploy_PRELIVE" />
		</antcall>
		<antcall target="_enableConfigs" />
		<antcall target="_removeConfigs">
			<param name="destroy.prefix" value="QA" />
		</antcall>

		<!-- Build Classes, Make WAR, and Deploy -->
		<antcall target="_makewar">
			<param name="JVM.version" value="1.7" />
		</antcall>
		<antcall target="_upload">
			<param name="ssh.host" value="localhost" />
			<param name="ssh.userid" value="antdeploy" />
			<param name="ssh.keyfile" value="/Users/xplooy/.ssh/id_antdeploy_rsa" />
			<!-- :NOTE: Custom SCM path: PRELIVE uses PRELIVE as upload directory (overrides custom target prefix above) -->
			<param name="ssh.uploaddir" value="/Users/antdeploy/archive/${war.context}/PRELIVE/" />
<!-- :TODO: enable once Tomcat Manager integration is complete
			<param name="tomcat.manager.url" value="http://localhost:8080/manager" />
			<!- - param name="tomcat.manager.url" value="http://tws01_ass1:8080/manager" / - ->
			<param name="tomcat.manager.username" value="adminuserisadminy" />
			<param name="tomcat.manager.password" value="helloworldthesearenotrealcredentials" />
-->
		</antcall>

		<echo message="Deploy to PRELIVE environment SUCCESSFUL!" />
	</target>

	<target name="deploy.PRO" depends="_init" description="Back up current PRO environment WAR as a rollback state, and deploy latest PRELIVE environment WAR to PRO environment">
		<property name="target.prefix" value="PRO" />

		<antcall target="_confirm.go" />
		<echo message="Backing up current PRO environment WAR as a rollback state, and deploying latest PRELIVE environment WAR to PRO environment" />

		<!-- Set up all SSH details -->
		<property name="ssh.host" value="localhost" />
		<property name="ssh.userid" value="antdeploy" />
		<property name="ssh.keyfile" value="/Users/xplooy/.ssh/id_antdeploy_rsa" />
		<property name="ssh.prelivefile" value="/Users/antdeploy/archive/${war.context}/PRELIVE/${war.filename}" />
		<property name="ssh.rollbackfile" value="/Users/antdeploy/archive/${war.context}/rollback/${war.filename}" />
		<property name="ssh.archivedir" value="/Users/antdeploy/archive/${war.context}/history/" />
		<property name="ssh.deployfile" value="/Users/antdeploy/archive/${war.context}/PRO/${war.filename}" />

		<!-- Run the required copy and touch commands on the remote server -->
		<sshexec
			host="${ssh.host}"
			username="${ssh.userid}"
			keyfile="${ssh.keyfile}"
			command="if [ -f &quot;${ssh.prelivefile}&quot; ] ; then
				aihrelease=`unzip -c ${ssh.prelivefile} META-INF/MANIFEST.MF | awk '/Identifier:/ { print $2 }' | tr -d '\r\n'` &amp;&amp;
				if [ -f &quot;${ssh.deployfile}&quot; ] ; then
					cp -p ${ssh.deployfile} ${ssh.rollbackfile} ;
				fi &amp;&amp;
				cp -p ${ssh.prelivefile} ${ssh.archivedir}$$aihrelease.war &amp;&amp;
				cp -p ${ssh.prelivefile} ${ssh.deployfile} &amp;&amp;
				touch ${ssh.deployfile} &amp;&amp;
				unset aihrelease &amp;&amp;
				echo SUCCESS ; fi"
			trust="true"
			verbose="false"
			failonerror="false"
			outputproperty="ssh.response"
		/>

		<!-- Test for failure -->
		<condition property="ssh.fail">
			<not>
				<equals arg1="SUCCESS" arg2="${ssh.response}" casesensitive="false" trim="true" forcestring="true" />
			</not>
		</condition>
		<fail if="ssh.fail">Deploy to ${target.prefix} FAILED: Remote server said: ${ssh.response}.</fail>

		<echo message="Deploy to ${target.prefix} environment SUCCESSFUL!" />
	</target>



	<!-- ============================================================ -->
	<!-- Internal Processing Targets -->
	<!-- ============================================================ -->

	<target name="_init" description="Initialise date properties">
		<echo message="Initialising date properties" />
		<tstamp prefix="build-info">
			<format property="datestamp" pattern="yyyy-MM-dd HH:mm:ss z" locale="en,AU" />
			<format property="release" pattern="yyyyMMdd.HHmm" locale="en,AU" />
		</tstamp>
	</target>

	<target name="_confirm.go" description="Prompt the user to perform the build and release process">
		<condition property="go.abort">
			<or>
				<not><isset property="target.prefix" /></not>
				<not><isset property="war.context" /></not>
				<not><isset property="build-info.release" /></not>
			</or>
		</condition>
		<fail if="go.abort">Build configmration prompt is missing one or more required properties, and the build cannot continue.</fail>

		<input message="Really deploy ${war.context} app to ${target.prefix} environment (enter “yes” to continue)? " addproperty="go.input" />
		<condition property="go.abort">
			<not>
				<equals arg1="yes" arg2="${go.input}" casesensitive="false" trim="true" forcestring="true" />
			</not>
		</condition>
		<fail if="go.abort">Aborting as requested.</fail>
	</target>

	<target name="_export" description="Retrieve a copy of the codebase for the given environment from source control">
		<condition property="export.abort">
			<or>
				<not><isset property="target.prefix" /></not>
				<not><isset property="war.context" /></not>
				<not><isset property="export.dir" /></not>
			</or>
		</condition>
		<fail if="export.abort">Export is missing one or more required properties, and the build cannot continue.</fail>

		<property name="svn.url" value="http://itrepos/apps/web_${war.context}/${scm.path}" />
		<exec executable="svn" outputproperty="svn.info" failonerror="true">
			<arg line="info ${svn.url}" />
		</exec>
		<loadresource property="svn.revision">
			<propertyresource name="svn.info" />
			<filterchain>
				<tokenfilter>
					<filetokenizer />
				</tokenfilter>
				<linecontainsregexp>
					<regexp pattern="^Revision: (\d+)" />
				</linecontainsregexp>
				<replaceregex pattern="^Revision: (\d+)" replace="\1" />
				<striplinebreaks />
			</filterchain>
		</loadresource>
		<condition property="svn.revision.abort">
			<or>
				<not><isset property="svn.revision" /></not>
				<not><matches pattern="^\d+$" string="${svn.revision}" /></not>
			</or>
		</condition>
		<fail if="svn.revision.abort">Export could not determine source code revision for ${war.context} project (server returned: ${svn.revision}), and the build cannot continue.</fail>

		<echoproperties regex="^svn\.revision$" destfile="${tmp.dir}/_svnrevision" failonerror="true" />
		<echo message="Retrieving a copy of the ${war.context} codebase at r${svn.revision} for the ${target.prefix} environment from source control at ${svn.url} into ${export.dir}" />

		<exec executable="svn" failonerror="true">
			<arg line="export -q -r${svn.revision} ${svn.url} ${export.dir}" />
		</exec>

		<echo message="Codebase retrieved successfully." />
	</target>

	<target name="_enableConfigs" description="Rename any environment-specific override files (settings etc) to enable them for the given environment prefix">
		<condition property="enableConfigs.abort">
			<or>
				<not><isset property="target.prefix" /></not>
				<not><isset property="web.dir" /></not>
			</or>
		</condition>
		<fail if="enableConfigs.abort">enableConfigs is missing one or more required properties, and the build cannot continue.</fail>

		<echo message="Renaming any environment-specific override files (settings etc) to enable them for the ${target.prefix} environment prefix" />

		<move todir="${web.dir}" overwrite="true" force="true">
			<fileset dir="${web.dir}" />
			<regexpmapper from="(.+)_${target.prefix}(\..+)?" to="\1\2" />
		</move>

		<echo message="${target.prefix} environment config files enabled successfully." />
	</target>

	<target name="_removeConfigs" description="Remove config files meant for the given environment prefix">
		<condition property="removeConfigs.abort">
			<or>
				<not><isset property="destroy.prefix" /></not>
				<not><isset property="web.dir" /></not>
				<not><isset property="tmp.dir" /></not>
				<not><isset property="export.dir" /></not>
			</or>
		</condition>
		<fail if="removeConfigs.abort">removeConfigs is missing one or more required properties, and the build cannot continue.</fail>

		<echo message="Removing config files meant for the ${destroy.prefix} environment prefix" />

		<move todir="${tmp.dir}" overwrite="true" force="true">
			<fileset dir="${web.dir}" />
			<regexpmapper from="(.+)_${destroy.prefix}(\..+)?" to="_tmpenvconfig" />
		</move>
		<delete file="${tmp.dir}/_tmpenvconfig" quiet="yes" />

		<echo message="${destroy.prefix} environment config files removed successfully." />
	</target>

	<target name="_clean" description="Clean up (delete) existing Java classes and empty build directories">
		<echo message="Cleaning up (deleting) existing Java classes and empty build/logs directories" />

		<!-- Clean existing Java classes and empty directories -->
		<mkdir dir="${classes.dir}" />
		<delete>
			<fileset dir="${classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${classes.dir}">
				<and>
					<size value="0" />
					<type type="dir" />
				</and>
			</fileset>
		</delete>

		<!-- Clean “app-logs-” prefixed directories (leaving “autobuild” files) -->
		<delete>
			<fileset dir="${web.dir}">
				<include name="**/app-logs-*/*" />
				<exclude name="**/autobuild" />
			</fileset>
		</delete>

		<echo message="Java classes and empty build/logs directories cleaned up successfully." />
	</target>

	<target name="_build" depends="_clean" description="Compile all source Java files">
		<condition property="build.abort">
			<or>
				<not><isset property="classes.dir" /></not>
				<not><isset property="src.dir" /></not>
				<not><isset property="JVM.version" /></not>
			</or>
		</condition>
		<fail if="build.abort">Java class build is missing one or more required properties, and the build cannot continue.</fail>

		<echo message="Compiling all source Java files from ${src.dir} to ${classes.dir}" />

		<mkdir dir="${classes.dir}" />
		<path id="master-classpath">
			<fileset dir="${webinf.dir}/lib" includes="*.jar" />
			<fileset dir="${tomcatlib.dir}" includes="*.jar" />
			<pathelement path="${classes.dir}" />
		</path>
		<javac
			classpathref="master-classpath"
			srcdir="${src.dir}"
			destdir="${classes.dir}"
			source="${JVM.version}"
			target="${JVM.version}"
			debug="true"
			deprecation="false"
			optimize="false"
			includeantruntime="false"
			failonerror="true"
			nowarn="true"
		/>

		<echo message="Java classes built successfully." />
	</target>

	<target name="_makewar" depends="_build" description="Deploy new WAR to given environment">
		<property file="${tmp.dir}/_svnrevision" />
		<condition property="makewar.abort">
			<or>
				<not><isset property="target.prefix" /></not>
				<not><isset property="war.context" /></not>
				<not><isset property="war.filename" /></not>
				<not><isset property="web.dir" /></not>
				<not><isset property="webinf.dir" /></not>
				<not><isset property="classes.dir" /></not>
				<not><isset property="svn.revision" /></not>
				<not><isset property="build-info.release" /></not>
				<not><isset property="build-info.datestamp" /></not>
			</or>
		</condition>
		<fail if="makewar.abort">Make WAR is missing one or more required properties, and the build cannot continue.</fail>

		<echo message="Making WAR file of ${war.context} app release ${build-info.release} (r${svn.revision}) for the ${target.prefix} environment -- started ${build-info.datestamp}" />
		<property name="war.id" value="${war.context}-${target.prefix}-r${svn.revision}-${build-info.release}" />

		<war destfile="${war.filename}" webxml="${webinf.dir}/web.xml" filesetmanifest="merge" duplicate="preserve">
			<classes dir="${classes.dir}" />
			<fileset dir="${web.dir}">
				<include name="**/*.*" />
				<include name="**/app-logs-*/autobuild" />
				<include name="WEB-INF/aggregator/certs/jssecacerts" />
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/classes/**/*.class" />
			</fileset>
			<manifest>
				<section name="AIH-Build">
					<attribute name="App" value="${war.context}" />
					<attribute name="Target" value="${target.prefix}" />
					<attribute name="Revision" value="${svn.revision}" />
					<attribute name="Release" value="${build-info.release}" />
					<attribute name="Built-On" value="${build-info.datestamp}" />
					<attribute name="Identifier" value="${war.id}" />
				</section>
			</manifest>
		</war>

		<!-- Back up the new WAR file using the unique ID as its filename -->
<!-- :TODO: this is purely during the development of the Ant build script itself; remove when done -->
		<echo message="Backing up ${war.filename} as ${war.id}.war (:TODO: this is purely during the development of the Ant build script itself; remove when done)" />
		<copy file="${war.filename}" tofile="${war.id}.war" quiet="true" />

		<echo message="WAR created successfully." />
	</target>

	<target name="_upload" description="Upload built WAR to the given environment">
		<condition property="upload.abort">
			<or>
				<not><isset property="target.prefix" /></not>
				<not><isset property="war.context" /></not>
				<not><isset property="war.filename" /></not>
				<not><isset property="ssh.host" /></not>
				<not><isset property="ssh.userid" /></not>
				<not><isset property="ssh.keyfile" /></not>
				<not><isset property="ssh.uploaddir" /></not>
<!-- :TODO: enable once Tomcat Manager integration is complete
				<not><isset property="tomcat.manager.url" /></not>
				<not><isset property="tomcat.manager.username" /></not>
				<not><isset property="tomcat.manager.password" /></not>
-->
			</or>
		</condition>
		<fail if="upload.abort">Upload is missing one or more required properties, and the build cannot continue.</fail>

		<condition property="keyfile.abort">
			<not><available file="${ssh.keyfile}" type="file" /></not>
		</condition>
		<fail if="keyfile.abort">Upload cannot find the ${ssh.keyfile} keyfile, and the build cannot continue.</fail>

		<echo message="Uploading ${war.filename} to ${ssh.host} using keyfile ${ssh.keyfile} into ${ssh.uploaddir}" />

		<scp
			file="${war.filename}"
			todir="${ssh.userid}@${ssh.host}:${ssh.uploaddir}"
			keyfile="${ssh.keyfile}"
			sftp="yes"
			trust="true"
			verbose="false"
			failonerror="true"
		/>

		<property name="ssh.prelivefile" value="${ssh.uploaddir}${war.filename}" />

		<!-- Run the required touch command on the remote server -->
		<sshexec
			host="${ssh.host}"
			username="${ssh.userid}"
			keyfile="${ssh.keyfile}"
			command="if [ -f &quot;${ssh.prelivefile}&quot; ] ; then
				touch ${ssh.prelivefile} &amp;&amp;
				echo SUCCESS ;
				else echo NOFILE ; fi"
			trust="true"
			verbose="false"
			failonerror="false"
			outputproperty="ssh.response"
		/>

		<!-- Test for failure -->
		<condition property="ssh.fail">
			<not>
				<equals arg1="SUCCESS" arg2="${ssh.response}" casesensitive="false" trim="true" forcestring="true" />
			</not>
		</condition>
		<fail if="ssh.fail">Upload of ${war.filename} to ${ssh.host} FAILED: Remote server said: ${ssh.response}.</fail>

<!-- :TODO: enable once Tomcat Manager integration is complete
		<tomcat-deploy
			url="${tomcat.manager.url}"
			username="${tomcat.manager.username}"
			password="${tomcat.manager.password}"
			path="/${war.context}"
		/>
-->

		<echo message="WAR file upload successfully." />
	</target>



	<!-- ============================================================ -->
	<!-- Apache Tomcat Manager Tasks and Targets -->
	<!-- ============================================================ -->

<!-- :TODO: enable once Tomcat Manager integration is complete
	<taskdef name="start"    classname="org.apache.catalina.ant.StartTask"    />
	<taskdef name="stop"     classname="org.apache.catalina.ant.StopTask"     />
	<taskdef name="list"     classname="org.apache.catalina.ant.ListTask"     />
	<taskdef name="deploy"   classname="org.apache.catalina.ant.DeployTask"   />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" />
	<taskdef name="reload"   classname="org.apache.catalina.ant.ReloadTask"   />

	<target name="tomcat-start" description="Start application in Tomcat">
		<start
			url="${tomcat-manager-url}"
			username="${tomcat-manager-username}"
			password="${tomcat-manager-password}"
			path="/${war.context}"
		/>
	</target>

	<target name="tomcat-stop" description="Stop application in Tomcat">
		<stop
			url="${tomcat-manager-url}"
			username="${tomcat-manager-username}"
			password="${tomcat-manager-password}"
			path="/${war.context}"
		/>
	</target>

	<target name="tomcat-list" description="List applications in Tomcat">
		<list
			url="${tomcat-manager-url}"
			username="${tomcat-manager-username}"
			password="${tomcat-manager-password}"
		/>
	</target>

	<target name="tomcat-deploy" description="Deploy application in Tomcat">
		<deploy
			url="${tomcat-manager-url}"
			username="${tomcat-manager-username}"
			password="${tomcat-manager-password}"
			path="/${war.context}"
		/>
	</target>

	<target name="tomcat-undeploy" description="Undeploy application from Tomcat">
		<undeploy
			failonerror="no"
			url="${tomcat-manager-url}"
			username="${tomcat-manager-username}"
			password="${tomcat-manager-password}"
			path="/${war.context}"
		/>
	</target>

	<target name="tomcat-reload" description="Reload application in Tomcat">
		<reload
			url="${tomcat.manager.url}"
			username="${tomcat.manager.username}"
			password="${tomcat.manager.password}"
			path="/${war.context}"
		/>
	</target>
-->

</project>
