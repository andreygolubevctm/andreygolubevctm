<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	xmlns:ai="http://www.softsure.co.za/"
	exclude-result-prefixes="soap ai">

<!-- IMPORTS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xsl:import href="../includes/utils.xsl"/>
	<xsl:import href="../includes/ranking.xsl"/>
	<xsl:import href="../includes/product_info.xsl"/>
	<xsl:import href="../includes/get_price_availability.xsl"/>

<!-- PARAMETERS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xsl:param name="defaultProductId" />
	<xsl:param name="request" />
	<xsl:param name="today" />
	<xsl:param name="transactionId">*NONE</xsl:param>
	<xsl:param name="quoteURL" />


<!-- MAIN TEMPLATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xsl:template match="/">
		<xsl:choose>

			<xsl:when test="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode = 'Status_Success'">
		<!-- ACCEPTABLE -->
			<xsl:apply-templates />
		</xsl:when>

			<xsl:otherwise>
		<!-- UNACCEPTABLE -->
			<results>
				<xsl:element name="price">
						<xsl:attribute name="productId"><xsl:value-of select="$defaultProductId" /></xsl:attribute>
					<xsl:attribute name="service">AI</xsl:attribute>
					<available>N</available>
					<transactionId><xsl:value-of select="$transactionId"/></transactionId>
					<xsl:choose>
						<xsl:when test="error">
								<!--  Error generated by SOAPClient -->
							<xsl:copy-of select="error"></xsl:copy-of>
						</xsl:when>

							<xsl:when test="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode">
								<!--  Map AI's error codes to match ours -->
								<xsl:variable name="error_type">
									<xsl:choose>
										<xsl:when test="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode = 'Status_Failed'">
											returned_error
										</xsl:when>
										<xsl:when test="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode = 'Status_Knockout'">
											knock_out
										</xsl:when>
										<xsl:when test="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode = 'Status_MissingData'">
											returned_error
										</xsl:when>
						<xsl:otherwise>
											unknown
						</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>

								<xsl:call-template name="error_message">
									<xsl:with-param name="service">AI</xsl:with-param>
									<xsl:with-param name="error_type"><xsl:value-of select="$error_type"/></xsl:with-param>
									<xsl:with-param name="message"><xsl:value-of select="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusResults"></xsl:value-of></xsl:with-param>
									<xsl:with-param name="code"></xsl:with-param>
									<xsl:with-param name="data"><xsl:value-of select="/soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult/ai:Results/ai:StatusCode"></xsl:value-of></xsl:with-param>
								</xsl:call-template>
							</xsl:when>

							<xsl:otherwise>
								<xsl:call-template name="error_message">
									<xsl:with-param name="service">AI</xsl:with-param>
									<xsl:with-param name="error_type">unknown</xsl:with-param>
									<xsl:with-param name="message">uncaught error</xsl:with-param>
									<xsl:with-param name="code"></xsl:with-param>
									<xsl:with-param name="data"></xsl:with-param>
								</xsl:call-template>
							</xsl:otherwise>
					</xsl:choose>

					<headlineOffer>ONLINE</headlineOffer>

					<onlinePrice>
						<lumpSumTotal>9999999999</lumpSumTotal>
				<xsl:call-template name="productInfo">
								<xsl:with-param name="productId" select="$defaultProductId" />
					<xsl:with-param name="priceType" select="headline" />
					<xsl:with-param name="kms" select="''" />
				</xsl:call-template>
					</onlinePrice>

					<xsl:call-template name="ranking">
						<xsl:with-param name="productId">*NONE</xsl:with-param>
					</xsl:call-template>

				</xsl:element>
			</results>
		</xsl:otherwise>

		</xsl:choose>
	</xsl:template>


<!-- PRICES AVAILABLE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xsl:template match="soap:Envelope/soap:Body/ai:GetMultiPremiumResponse/ai:GetMultiPremiumResult">

		<xsl:variable name="referenceNumber">
			<xsl:value-of select="ai:Results/ai:ReferenceNo"/>
		</xsl:variable>

		<results>

			<xsl:for-each select="ai:PremiumQuoted/ai:SSPremiumQuoted">

				<xsl:variable name="productId">
			<xsl:choose>
						<xsl:when test="ai:Product = 'CLASSICSB'">AI-01-02</xsl:when>
						<xsl:when test="ai:Product = 'CLASSIC'">AI-01-01</xsl:when>
						<xsl:otherwise>ERROR</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>


				<xsl:choose>
					<xsl:when test="$productId != 'ERROR'">
						
			<xsl:element name="price">
				<xsl:attribute name="service">AI</xsl:attribute>
				<xsl:attribute name="productId"><xsl:value-of select="$productId" /></xsl:attribute>

				<available>Y</available>
				<transactionId><xsl:value-of select="$transactionId"/></transactionId>

				<headlineOffer>ONLINE</headlineOffer>

				<onlineAvailable>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">ONLINE</xsl:with-param>
						<xsl:with-param name="hasModifications">N</xsl:with-param>
					</xsl:call-template>
				</onlineAvailable>
				<onlineAvailableWithModifications>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">ONLINE</xsl:with-param>
						<xsl:with-param name="hasModifications">Y</xsl:with-param>
					</xsl:call-template>
				</onlineAvailableWithModifications>

				<offlineAvailable>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">OFFLINE</xsl:with-param>
						<xsl:with-param name="hasModifications">N</xsl:with-param>
					</xsl:call-template>
				</offlineAvailable>
				<offlineAvailableWithModifications>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">OFFLINE</xsl:with-param>
						<xsl:with-param name="hasModifications">Y</xsl:with-param>
					</xsl:call-template>
				</offlineAvailableWithModifications>

				<callbackAvailable>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">CALLBACK</xsl:with-param>
						<xsl:with-param name="hasModifications">N</xsl:with-param>
					</xsl:call-template>
				</callbackAvailable>
				<callbackAvailableWithModifications>
					<xsl:call-template name="getPriceAvailability">
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="priceType">CALLBACK</xsl:with-param>
						<xsl:with-param name="hasModifications">Y</xsl:with-param>
					</xsl:call-template>
				</callbackAvailableWithModifications>

				<xsl:call-template name="priceInfo">
					<xsl:with-param name="tagName">onlinePrice</xsl:with-param>
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="init"><xsl:value-of select="ai:MonthlyPremium/ai:InitFee"/></xsl:with-param>
						<xsl:with-param name="monthlyPremium"><xsl:value-of select="ai:MonthlyPremium/ai:TotalPremium"/></xsl:with-param>
						<xsl:with-param name="annualPremium"><xsl:value-of select="ai:AnnualPremium/ai:TotalPremium"/></xsl:with-param>
				</xsl:call-template>

				<xsl:call-template name="priceInfo">
					<xsl:with-param name="tagName">offlinePrice</xsl:with-param>
						<xsl:with-param name="productId" select="$productId" />
						<xsl:with-param name="init"><xsl:value-of select="ai:MonthlyPremium/ai:InitFee"/></xsl:with-param>
						<xsl:with-param name="monthlyPremium"><xsl:value-of select="ai:MonthlyPremium/ai:TotalPremium"/></xsl:with-param>
						<xsl:with-param name="annualPremium"><xsl:value-of select="ai:AnnualPremium/ai:TotalPremium"/></xsl:with-param>
				</xsl:call-template>

				<productDes>AI Car Insurance</productDes>
				<underwriter>The Hollard Insurance Company (PTY) LTD</underwriter>
				<brandCode>AI</brandCode>
				<acn>78 090 584 473</acn>
				<afsLicenceNo>241436</afsLicenceNo>
				<excess>
						<total><xsl:value-of select="ai:Excess"/></total>
					<excess>
						<description>Male driver under the age of 30 or less than 2 years driving experience</description>
						<amount>$1500</amount>
					</excess>
					<excess>
						<description>Female driver under the age of 30 or less than 2 years driving experience</description>
						<amount>$900</amount>
					</excess>
					<excess>
						<description>Unlisted drivers</description>
						<amount>$1000</amount>
					</excess>
					<excess>
						<description>Single car accident excess</description>
						<amount>$300</amount>
					</excess>
					<excess>
						<description>Theft / Malicious Damage excess</description>
						<amount>$1000</amount>
					</excess>
					<excess>
						<description>Claim within first 6 months of policy inception</description>
						<amount>$600</amount>
					</excess>

				</excess>
				<conditions>
						<condition/>
				</conditions>

					<leadNo><xsl:value-of select="$referenceNumber"/></leadNo>

				<telNo>1300 284 875</telNo>
				<openingHours>Monday to Friday (9am-7pm EST)</openingHours>

							<quoteUrl><xsl:value-of select="$quoteURL" /><xsl:value-of select="$referenceNumber"/>?p=<xsl:value-of select="ai:Product" />&amp;e=<xsl:value-of select="ai:Excess"/></quoteUrl>

				<refnoUrl/>

							<xsl:choose>
								<xsl:when test="$productId = 'AI-01-02'">
									<pdsaUrl>http://b2b.aiinsurance.com.au/SSPublicDocs/Smart-Box_Cover_PDS_01.pdf</pdsaUrl>
							<pdsaDesLong>Product Disclosure Statement</pdsaDesLong>
							<pdsaDesShort>PDS</pdsaDesShort>
									<pdsbUrl>http://b2b.aiinsurance.com.au/SSPublicDocs/Smart-Box_Privacy_Document_PDS_02.pdf</pdsbUrl>
								<pdsbDesLong>Smart Box Privacy Statement</pdsbDesLong>
								<pdsbDesShort>PS</pdsbDesShort>
									<pdscUrl>http://b2b.aiinsurance.com.au/SSPublicDocs/Smart-Box_QA_01.pdf</pdscUrl>
								<pdscDesLong>Smart Box Q&amp;A</pdscDesLong>
								<pdscDesShort>QA</pdscDesShort>
							</xsl:when>
							<xsl:otherwise>
									<pdsaUrl>http://b2b.aiinsurance.com.au/SSPublicDocs/Comprehensive_Cover_PDS_01.pdf</pdsaUrl>
									<pdsaDesLong>Product Disclosure Statement</pdsaDesLong>
									<pdsaDesShort>PDS</pdsaDesShort>
								<pdsbUrl/>
								<pdsbDesLong/>
								<pdsbDesShort/>
							</xsl:otherwise>
								</xsl:choose>

				<fsgUrl />

				<disclaimer>
					<![CDATA[
					The indicative quote includes any applicable online discount and is subject to meeting the insurer's underwriting criteria and may change due to factors such as:<br>
					- Driver's history or offences or claims<br>
					- Age or licence type of additional drivers<br>
					- Vehicle condition, accessories and modifications<br>
					]]>
				</disclaimer>

				<transferring />

				<xsl:call-template name="ranking">
					<xsl:with-param name="productId" select="$productId" />
				</xsl:call-template>					

							<discount>
								<online></online>
								<offline></offline>
							</discount>

			</xsl:element>						

					</xsl:when>
					<xsl:otherwise>
						<!-- Do nothing, if both failed, assume the StatusCode of the transaction is not 'Status_success' and an error message is generated. -->
					</xsl:otherwise>
				</xsl:choose>

			</xsl:for-each>

		</results>

	</xsl:template>

	<!-- Create the onlinePrice & offlinePrice elements -->
	<xsl:template name="priceInfo">

		<xsl:param name="tagName" />
		<xsl:param name="productId" />
		<xsl:param name="init" />
		<xsl:param name="monthlyPremium" />
		<xsl:param name="annualPremium" />

		<xsl:element name="{$tagName}">

					<lumpSumTotal>
						<xsl:call-template name="util_mathCeil">
					<xsl:with-param name="num" select="$annualPremium"/>
						</xsl:call-template>
					</lumpSumTotal>
					<instalmentFirst>
				<xsl:value-of select="format-number($monthlyPremium + $init, '0.##')"/>
					</instalmentFirst>
					<instalmentCount>11</instalmentCount>
					<instalmentPayment>
				<xsl:value-of select="$monthlyPremium"/>
					</instalmentPayment>
					<instalmentTotal>
						<xsl:call-template name="util_mathCeil">
					<xsl:with-param name="num" select="($monthlyPremium * 12) + 110" />
						</xsl:call-template>
					</instalmentTotal>

			<xsl:call-template name="productInfo">
				<xsl:with-param name="productId" select="$productId" />
				<xsl:with-param name="priceType" select="$tagName" />
				<xsl:with-param name="kms" select="''" />
			</xsl:call-template>

		</xsl:element>

	</xsl:template>

</xsl:stylesheet>